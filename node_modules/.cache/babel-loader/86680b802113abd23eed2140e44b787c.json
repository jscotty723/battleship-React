{"ast":null,"code":"import _classCallCheck from \"/Users/juliannespeters/Library/Mobile Documents/com~apple~CloudDocs/Bootcamp/Week 3/D5battleship/battleship/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/juliannespeters/Library/Mobile Documents/com~apple~CloudDocs/Bootcamp/Week 3/D5battleship/battleship/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/juliannespeters/Library/Mobile Documents/com~apple~CloudDocs/Bootcamp/Week 3/D5battleship/battleship/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/juliannespeters/Library/Mobile Documents/com~apple~CloudDocs/Bootcamp/Week 3/D5battleship/battleship/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/juliannespeters/Library/Mobile Documents/com~apple~CloudDocs/Bootcamp/Week 3/D5battleship/battleship/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/juliannespeters/Library/Mobile Documents/com~apple~CloudDocs/Bootcamp/Week 3/D5battleship/battleship/src/Board.js\";\nimport React, { Component } from 'react';\nimport './Board.css';\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n\n    _this.statusMessage = function (message) {\n      _this.setState({\n        statusMessage: message\n      });\n    };\n\n    _this.checkWinner = function () {\n      if (_this.state.hitCount == _this.state.ships.length - 1) {\n        _this.statusMessage('You\\'ve won!');\n      }\n    };\n\n    _this.displayMissed = function (ships) {\n      var message = \"You did not use your torpedos wisely, young padawan\";\n\n      for (var i = 0; i < ships.length; i++) {\n        if (_this.state.gameBoard[ships[i]] === null) {\n          var missed = _this.state.gameBoard;\n          missed[ships[i]] = \"m\";\n\n          _this.setState({\n            gameBoard: missed,\n            statusMessage: message\n          });\n        }\n      }\n\n      return message;\n    };\n\n    _this.playerClick = function (i) {\n      var _this$state = _this.state,\n          ships = _this$state.ships,\n          gameBoard = _this$state.gameBoard,\n          torpedoCount = _this$state.torpedoCount,\n          hitCount = _this$state.hitCount;\n\n      if (gameBoard[i] == null && hitCount < ships.length) {\n        if (torpedoCount <= 0) {\n          _this.statusMessage(\"You're out of torpedos!\");\n\n          _this.displayMissed(ships);\n        } else {\n          if (ships.includes(i)) {\n            var hit = gameBoard;\n            hit[i] = \"x\";\n\n            _this.setState({\n              gameBoard: hit,\n              torpedoCount: torpedoCount - 1,\n              hitCount: hitCount + 1\n            });\n          } else {\n            var miss = gameBoard;\n            miss[i] = \"o\";\n\n            _this.setState({\n              gameBoard: miss,\n              torpedoCount: torpedoCount - 1\n            });\n          }\n        }\n\n        console.log(hitCount);\n\n        _this.checkWinner();\n      }\n    };\n\n    _this.displayColor = function (i) {\n      if (_this.state.gameBoard[i] === 'x') {\n        return _this.state.boxColor[1];\n      } else if (_this.state.gameBoard[i] === 'o') {\n        return _this.state.boxColor[2];\n      } else if (_this.state.gameBoard[i] === 'm') {\n        return _this.state.boxColor[3];\n      } else {\n        return _this.state.boxColor[0];\n      }\n    };\n\n    _this.shipYard = function () {\n      return Math.floor(Math.random() * 100);\n    };\n\n    _this.createBoard = function () {\n      var emptyArr = [];\n\n      for (var i = 5; i > 0; i--) {\n        emptyArr[i] = _this.createShip(i);\n      }\n\n      var newArr = emptyArr.flat([1]);\n\n      for (var _i = 0; _i < newArr.length; _i++) {\n        for (var k = 1; k < newArr.length; k++) {\n          if (newArr[_i] === newArr[k]) {\n            console.log(\"try again\"); // this.createBoard()\n          } else {\n            _this.setState({\n              ships: newArr,\n              gameBoard: Array(100).fill(null),\n              boxColor: ['blue', 'red', 'green', 'yellow'],\n              torpedoCount: 10,\n              hitCount: 0,\n              statusMessage: ''\n            });\n          }\n        }\n      }\n    };\n\n    _this.checkShip = function (tempShip) {\n      // let tempShips = []\n      // for(let i = 0; i < tempShip.length; i++) {\n      // //     if (this.state.ships.includes(tempShip[i])) {\n      // //         this.createShip(tempShip.length)\n      // //     }\n      // // }\n      // }\n      // tempShips.push(tempShip)\n      // console.log('tempships', tempShips)\n      // console.log(\"tempship\", tempShip)\n      var ships1 = _this.state.ships; // console.log('ships1', ships1);\n\n      var newShips = tempShip.concat(ships1); // console.log('newships', newShips);\n\n      _this.setState({\n        ships: newShips,\n        gameBoard: Array(100).fill(null),\n        boxColor: ['blue', 'red', 'green', 'yellow'],\n        torpedoCount: 10,\n        hitCount: 0,\n        statusMessage: ''\n      });\n    };\n\n    _this.state = {\n      gameBoard: Array(100).fill(null),\n      boxColor: ['blue', 'red', 'green', 'yellow'],\n      ships: [],\n      torpedoCount: 10,\n      hitCount: 0,\n      statusMessage: ''\n    };\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"createShip\",\n    value: function createShip(num) {\n      var x = Math.floor(Math.random() * 10);\n      var y = Math.floor(Math.random() * (11 - num));\n      var tempShip = [];\n\n      if (Math.floor(Math.random() * 2) % 2 == 0) {\n        // vertical\n        for (var i = 0; i < num; i++) {\n          tempShip.push(parseInt('' + (y + i) + x));\n        }\n      } else {\n        // horizontal\n        for (var _i2 = 0; _i2 < num; _i2++) {\n          tempShip.push(parseInt('' + x + (y + _i2)));\n        }\n      }\n\n      return tempShip;\n      this.checkShip(tempShip);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log(this.state);\n      return React.createElement(\"div\", {\n        className: \"boardContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, this.state.gameBoard.map(function (el, i) {\n        return React.createElement(\"div\", {\n          onClick: function onClick() {\n            return _this2.playerClick(i);\n          },\n          style: {\n            backgroundColor: _this2.displayColor(i)\n          },\n          className: \"box i\",\n          id: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        }, i);\n      })), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, this.state.torpedoCount, \" Status: \", this.state.torpedoCount === 0 ? this.displayMissed(this.state.ships) : this.state.statusMessage), React.createElement(\"button\", {\n        onClick: this.createBoard,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"Start Generate Ships\"));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nexport default Board;","map":{"version":3,"sources":["/Users/juliannespeters/Library/Mobile Documents/com~apple~CloudDocs/Bootcamp/Week 3/D5battleship/battleship/src/Board.js"],"names":["React","Component","Board","props","statusMessage","message","setState","checkWinner","state","hitCount","ships","length","displayMissed","i","gameBoard","missed","playerClick","torpedoCount","includes","hit","miss","console","log","displayColor","boxColor","shipYard","Math","floor","random","createBoard","emptyArr","createShip","newArr","flat","k","Array","fill","checkShip","tempShip","ships1","newShips","concat","num","x","y","push","parseInt","map","el","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport './Board.css';\n\nclass Board extends Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            gameBoard: Array(100).fill(null),\n            boxColor: ['blue', 'red', 'green', 'yellow'],\n            ships: [],\n            torpedoCount: 10,\n            hitCount: 0,\n            statusMessage: ''\n        }\n    }\n\n    statusMessage = (message) => {\n        this.setState({statusMessage: message})\n    }\n\n    checkWinner =()=> {\n        if(this.state.hitCount == this.state.ships.length-1) {\n            this.statusMessage('You\\'ve won!')\n        }\n    }\n\n    displayMissed = (ships) => {\n        let message = \"You did not use your torpedos wisely, young padawan\"\n        for (let i = 0; i < ships.length; i++) {\n            if (this.state.gameBoard[ships[i]] === null) {\n                let missed = this.state.gameBoard\n                missed[ships[i]] = \"m\"\n                this.setState({\n                    gameBoard: missed,\n                    statusMessage: message\n                })\n            }\n        }return message\n    }\n\n\n    playerClick = (i) => {\n        let {ships, gameBoard, torpedoCount, hitCount} = this.state\n        if (gameBoard[i] == null && hitCount < ships.length) {\n            if (torpedoCount <= 0) {\n                this.statusMessage(\"You're out of torpedos!\")\n                this.displayMissed(ships)\n\n            } else {\n                if (ships.includes(i)) {\n                    let hit = gameBoard\n                    hit[i] = \"x\"\n                    this.setState({\n                        gameBoard: hit,\n                        torpedoCount: torpedoCount -1,\n                        hitCount: hitCount +1\n                    })\n                } else {\n                    let miss = gameBoard\n                    miss[i] = \"o\"\n                    this.setState({\n                        gameBoard: miss,\n                        torpedoCount: torpedoCount -1\n                    })\n                }\n            }\n            console.log(hitCount);\n            this.checkWinner()\n        }\n    }\n\n    displayColor = (i) => {\n        if (this.state.gameBoard[i]==='x') {\n            return this.state.boxColor[1]\n        } else if (this.state.gameBoard[i]==='o') {\n            return this.state.boxColor[2]\n        } else if (this.state.gameBoard[i]==='m') {\n            return this.state.boxColor[3]\n        } else {\n            return this.state.boxColor[0]\n        }\n    }\n\n    shipYard = () => {\n         return Math.floor(Math.random() * 100)\n    }\n\n    createBoard = () => {\n        let emptyArr = []\n        for (let i = 5; i > 0; i--) {\n            emptyArr[i] = this.createShip(i)\n        }\n        let newArr = emptyArr.flat([1])\n\n        for (let i = 0; i < newArr.length; i++) {\n            for (let k = 1; k < newArr.length; k++)\n            if (newArr[i] === newArr[k]) {\n                console.log(\"try again\");\n                // this.createBoard()\n            } else {\n                this.setState({\n                        ships: newArr,\n                        gameBoard: Array(100).fill(null),\n                        boxColor: ['blue', 'red', 'green', 'yellow'],\n                        torpedoCount: 10,\n                        hitCount: 0,\n                        statusMessage: ''\n                    })\n            }\n        }\n    }\n    createShip (num) {\n        let x = Math.floor(Math.random()* 10)\n        let y = Math.floor(Math.random()* (11-num))\n        let tempShip = []\n\n         if ((Math.floor(Math.random()*2) % 2) == 0) {\n             // vertical\n             for (let i = 0; i < num; i++) {\n                 tempShip.push(parseInt('' + (y+i) + x))\n             }\n\n         } else {\n             // horizontal\n             for (let i = 0; i < num; i++) {\n                 tempShip.push(parseInt('' + x + (y+i)))\n             }\n         }\n         return tempShip\n         this.checkShip(tempShip)\n\n        }\n\n    checkShip = (tempShip) => {\n        // let tempShips = []\n        // for(let i = 0; i < tempShip.length; i++) {\n        // //     if (this.state.ships.includes(tempShip[i])) {\n        // //         this.createShip(tempShip.length)\n        // //     }\n        // // }\n        // }\n        // tempShips.push(tempShip)\n        // console.log('tempships', tempShips)\n // console.log(\"tempship\", tempShip)\n        let ships1 = this.state.ships\n\n        // console.log('ships1', ships1);\n        let newShips = tempShip.concat(ships1)\n        // console.log('newships', newShips);\n        this.setState({\n            ships: newShips,\n            gameBoard: Array(100).fill(null),\n            boxColor: ['blue', 'red', 'green', 'yellow'],\n            torpedoCount: 10,\n            hitCount: 0,\n            statusMessage: ''\n        })\n    }\n\n\n\n\n  render() {\n      console.log(this.state)\n    return (\n        <div className=\"boardContainer\">\n            <div className=\"board\">\n            {this.state.gameBoard.map((el, i) => (\n                    <div onClick={() => this.playerClick(i)} style={{backgroundColor: this.displayColor(i)}} className=\"box i\" id={i}>\n                    {i}\n                    </div>\n            ))}\n            </div>\n            <p>{this.state.torpedoCount} Status: {(this.state.torpedoCount === 0) ? this.displayMissed(this.state.ships) : this.state.statusMessage}</p>\n            <button onClick={this.createBoard}>Start Generate Ships</button>\n        </div>\n    );\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}