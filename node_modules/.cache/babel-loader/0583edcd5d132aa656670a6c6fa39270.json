{"ast":null,"code":"import _classCallCheck from \"/Users/juliannepeters/Library/Mobile Documents/com~apple~CloudDocs/Bootcamp/PortfolioSite/Projects/battleship/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/juliannepeters/Library/Mobile Documents/com~apple~CloudDocs/Bootcamp/PortfolioSite/Projects/battleship/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/juliannepeters/Library/Mobile Documents/com~apple~CloudDocs/Bootcamp/PortfolioSite/Projects/battleship/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/juliannepeters/Library/Mobile Documents/com~apple~CloudDocs/Bootcamp/PortfolioSite/Projects/battleship/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/juliannepeters/Library/Mobile Documents/com~apple~CloudDocs/Bootcamp/PortfolioSite/Projects/battleship/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/juliannepeters/Library/Mobile Documents/com~apple~CloudDocs/Bootcamp/PortfolioSite/Projects/battleship/src/Board.js\";\nimport React, { Component } from 'react';\nimport './Board.css';\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n\n    _this.createBoardEasy = function () {\n      var emptyArr = [];\n\n      for (var i = 5; i > 0; i--) {\n        emptyArr[i] = _this.shipYard(i);\n      }\n\n      var newArr = emptyArr.flat([1]);\n\n      for (var _i = 0; _i < newArr.length; _i++) {\n        for (var k = _i + 1; k < newArr.length; k++) {\n          if (newArr[_i] === newArr[k]) {\n            console.log(newArr[_i], newArr[k]);\n            return _this.createBoardEasy();\n          }\n        }\n      }\n\n      _this.setState({\n        ships: newArr,\n        gameBoard: Array(100).fill(null),\n        boxColor: ['#D0D5D8', '#db0000', 'rgba(255, 255, 255, 0)', '#ffff00'],\n        torpedoCount: 50,\n        hitCount: 0,\n        statusMessage: 'Blast me if you can!'\n      });\n    };\n\n    _this.createBoardModerate = function () {\n      var emptyArr = [];\n      emptyArr[1] = _this.shipYard(1);\n      emptyArr[2] = _this.shipYard(2);\n      emptyArr[4] = _this.shipYard(3);\n      emptyArr[5] = _this.shipYard(4);\n      emptyArr[6] = _this.shipYard(5);\n      var newArr = emptyArr.flat([1]);\n\n      for (var i = 0; i < newArr.length; i++) {\n        for (var k = i + 1; k < newArr.length; k++) {\n          if (newArr[i] === newArr[k]) {\n            console.log(newArr[i], newArr[k]);\n            return _this.createBoardModerate();\n          }\n        }\n      }\n\n      _this.setState({\n        ships: newArr,\n        gameBoard: Array(100).fill(null),\n        boxColor: ['#D0D5D8', '#db0000', 'rgba(255, 255, 255, 0)', '#ffff00'],\n        torpedoCount: 40,\n        hitCount: 0,\n        statusMessage: 'Blast me if you can!'\n      });\n    };\n\n    _this.createBoardDifficult = function () {\n      var emptyArr = []; // calls ship creator function. number is length of ship//\n\n      emptyArr[1] = _this.shipYard(1);\n      emptyArr[2] = _this.shipYard(2);\n      emptyArr[3] = _this.shipYard(2);\n      emptyArr[4] = _this.shipYard(3);\n      emptyArr[5] = _this.shipYard(4);\n      emptyArr[6] = _this.shipYard(5); //takes nested arrays and makes one array without nested arrays//\n\n      var newArr = emptyArr.flat([1]); //nested loop checks for ships intersecting on the same array. if duplicate found, calls new board creation.//\n\n      for (var i = 0; i < newArr.length; i++) {\n        for (var k = i + 1; k < newArr.length; k++) {\n          if (newArr[i] === newArr[k]) {\n            console.log(newArr[i], newArr[k]);\n            return _this.createBoardDifficult();\n          }\n        }\n      }\n\n      _this.setState({\n        ships: newArr,\n        gameBoard: Array(100).fill(null),\n        boxColor: ['#D0D5D8', '#db0000', 'rgba(255, 255, 255, 0)', '#ffff00'],\n        torpedoCount: 40,\n        hitCount: 0,\n        statusMessage: 'Blast me if you can!'\n      });\n    };\n\n    _this.playerClick = function (i) {\n      //deconstructs this.state for easier referencing in below function//\n      var _this$state = _this.state,\n          ships = _this$state.ships,\n          gameBoard = _this$state.gameBoard,\n          torpedoCount = _this$state.torpedoCount,\n          hitCount = _this$state.hitCount; //makes sure click is on unclicked box and that hit count is not in winning state//\n\n      if (gameBoard[i] == null && hitCount < ships.length) {\n        //game over for out of torpedos//\n        if (torpedoCount <= 0) {\n          _this.statusMessage(\"You're out of torpedos!\");\n\n          _this.displayMissed(ships); //checks ships index to see if hit or miss//\n\n        } else {\n          //hit//\n          if (ships.includes(i)) {\n            var hit = gameBoard;\n            hit[i] = \"x\";\n\n            _this.setState({\n              gameBoard: hit,\n              torpedoCount: torpedoCount - 1,\n              hitCount: hitCount + 1\n            }); //miss//\n\n          } else {\n            var miss = gameBoard;\n            miss[i] = \"o\";\n\n            _this.setState({\n              gameBoard: miss,\n              torpedoCount: torpedoCount - 1\n            });\n          }\n        } //checks for winner after hit or miss determined//\n\n\n        _this.checkWinner();\n      }\n    };\n\n    _this.checkWinner = function () {\n      if (_this.state.hitCount == _this.state.ships.length - 1) {\n        _this.statusMessage('You\\'ve won!');\n      }\n    };\n\n    _this.displayMissed = function (ships) {\n      var message = \"You did not use your torpedos wisely, young padawan\";\n\n      for (var i = 0; i < ships.length; i++) {\n        if (_this.state.gameBoard[ships[i]] === null) {\n          var missed = _this.state.gameBoard;\n          missed[ships[i]] = \"m\";\n\n          _this.setState({\n            gameBoard: missed,\n            statusMessage: message\n          });\n        }\n      }\n\n      return message;\n    };\n\n    _this.statusMessage = function (message) {\n      _this.setState({\n        statusMessage: message\n      });\n    };\n\n    _this.displayColor = function (i) {\n      if (_this.state.gameBoard[i] === 'x') {\n        return _this.state.boxColor[1];\n      } else if (_this.state.gameBoard[i] === 'o') {\n        return _this.state.boxColor[2];\n      } else if (_this.state.gameBoard[i] === 'm') {\n        return _this.state.boxColor[3];\n      } else {\n        return _this.state.boxColor[0];\n      }\n    };\n\n    _this.state = {\n      gameBoard: Array(100).fill(null),\n      boxColor: ['#D0D5D8', '#db0000', 'rgba(255, 255, 255, 0)', '#ffff00'],\n      ships: [],\n      torpedoCount: 0,\n      hitCount: 0,\n      statusMessage: 'Blast me if you can!'\n    };\n    return _this;\n  } // Easy Board Constructor//\n\n\n  _createClass(Board, [{\n    key: \"shipYard\",\n    //creates ship//\n    value: function shipYard(num) {\n      //variables for x and y axis of ships//\n      var x = Math.floor(Math.random() * 10);\n      var y = Math.floor(Math.random() * (11 - num));\n      var tempShip = []; // choses by random math if ship will be vertical or horizontal//\n\n      if (Math.floor(Math.random() * 2) % 2 == 0) {\n        // vertical\n        for (var i = 0; i < num; i++) {\n          tempShip.push(parseInt('' + (y + i) + x));\n        }\n      } else {\n        // horizontal\n        for (var _i2 = 0; _i2 < num; _i2++) {\n          tempShip.push(parseInt('' + x + (y + _i2)));\n        }\n      }\n\n      return tempShip;\n    } //function to handel player click on box//\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"wholePage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pageContent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        className: \"headerContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \"Battleship\"), React.createElement(\"div\", {\n        className: \"selectLevel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"startGame\",\n        onClick: this.createBoardEasy,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"Easy\"), React.createElement(\"button\", {\n        className: \"startGame moderate\",\n        onClick: this.createBoardModerate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, \"Moderate\"), React.createElement(\"button\", {\n        className: \"startGame difficult\",\n        onClick: this.createBoardDifficult,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"Difficult\"))), React.createElement(\"section\", {\n        className: \"boardContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, this.state.gameBoard.map(function (el, i) {\n        return React.createElement(\"div\", {\n          onClick: function onClick() {\n            return _this2.playerClick(i);\n          },\n          style: {\n            backgroundColor: _this2.displayColor(i)\n          },\n          className: \"box i\",\n          id: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        });\n      }))), React.createElement(\"section\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"torpsStatus\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, \"Torpedos Remaining: \", this.state.torpedoCount), React.createElement(\"div\", {\n        className: \"hitsStatus\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \"Hits: \", this.state.hitCount, \" of \", this.state.ships.length)), React.createElement(\"div\", {\n        className: \"message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, \"Message: \", this.state.torpedoCount === 0 ? this.displayMissed(this.state.ships) : this.state.statusMessage))));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nexport default Board;","map":{"version":3,"sources":["/Users/juliannepeters/Library/Mobile Documents/com~apple~CloudDocs/Bootcamp/PortfolioSite/Projects/battleship/src/Board.js"],"names":["React","Component","Board","props","createBoardEasy","emptyArr","i","shipYard","newArr","flat","length","k","console","log","setState","ships","gameBoard","Array","fill","boxColor","torpedoCount","hitCount","statusMessage","createBoardModerate","createBoardDifficult","playerClick","state","displayMissed","includes","hit","miss","checkWinner","message","missed","displayColor","num","x","Math","floor","random","y","tempShip","push","parseInt","map","el","backgroundColor"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,aAAP;;IAEMC,K;;;;;AACF,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,+EAAMA,KAAN;;AADe,UAanBC,eAbmB,GAaD,YAAM;AACpB,UAAIC,QAAQ,GAAG,EAAf;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBD,QAAAA,QAAQ,CAACC,CAAD,CAAR,GAAc,MAAKC,QAAL,CAAcD,CAAd,CAAd;AACH;;AACD,UAAIE,MAAM,GAAGH,QAAQ,CAACI,IAAT,CAAc,CAAC,CAAD,CAAd,CAAb;;AAEA,WAAK,IAAIH,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGE,MAAM,CAACE,MAA3B,EAAmCJ,EAAC,EAApC,EAAwC;AACpC,aAAK,IAAIK,CAAC,GAAGL,EAAC,GAAC,CAAf,EAAkBK,CAAC,GAAGH,MAAM,CAACE,MAA7B,EAAqCC,CAAC,EAAtC;AACA,cAAIH,MAAM,CAACF,EAAD,CAAN,KAAcE,MAAM,CAACG,CAAD,CAAxB,EAA6B;AACzBC,YAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACF,EAAD,CAAlB,EAAsBE,MAAM,CAACG,CAAD,CAA5B;AACA,mBAAO,MAAKP,eAAL,EAAP;AACH;AAJD;AAKH;;AACD,YAAKU,QAAL,CAAc;AACVC,QAAAA,KAAK,EAAEP,MADG;AAEVQ,QAAAA,SAAS,EAAEC,KAAK,CAAC,GAAD,CAAL,CAAWC,IAAX,CAAgB,IAAhB,CAFD;AAGVC,QAAAA,QAAQ,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,wBAAvB,EAAiD,SAAjD,CAHA;AAIVC,QAAAA,YAAY,EAAE,EAJJ;AAKVC,QAAAA,QAAQ,EAAE,CALA;AAMVC,QAAAA,aAAa,EAAE;AANL,OAAd;AAQH,KAnCkB;;AAAA,UAsCnBC,mBAtCmB,GAsCG,YAAM;AACxB,UAAIlB,QAAQ,GAAG,EAAf;AACAA,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,MAAKE,QAAL,CAAc,CAAd,CAAd;AACAF,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,MAAKE,QAAL,CAAc,CAAd,CAAd;AACAF,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,MAAKE,QAAL,CAAc,CAAd,CAAd;AACAF,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,MAAKE,QAAL,CAAc,CAAd,CAAd;AACAF,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,MAAKE,QAAL,CAAc,CAAd,CAAd;AAEA,UAAIC,MAAM,GAAGH,QAAQ,CAACI,IAAT,CAAc,CAAC,CAAD,CAAd,CAAb;;AAEA,WAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGE,MAAM,CAACE,MAA3B,EAAmCJ,CAAC,EAApC,EAAwC;AACpC,aAAK,IAAIK,CAAC,GAAGL,CAAC,GAAC,CAAf,EAAkBK,CAAC,GAAGH,MAAM,CAACE,MAA7B,EAAqCC,CAAC,EAAtC;AACA,cAAIH,MAAM,CAACF,CAAD,CAAN,KAAcE,MAAM,CAACG,CAAD,CAAxB,EAA6B;AACzBC,YAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACF,CAAD,CAAlB,EAAsBE,MAAM,CAACG,CAAD,CAA5B;AACA,mBAAO,MAAKY,mBAAL,EAAP;AACH;AAJD;AAKH;;AACD,YAAKT,QAAL,CAAc;AACVC,QAAAA,KAAK,EAAEP,MADG;AAEVQ,QAAAA,SAAS,EAAEC,KAAK,CAAC,GAAD,CAAL,CAAWC,IAAX,CAAgB,IAAhB,CAFD;AAGVC,QAAAA,QAAQ,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,wBAAvB,EAAiD,SAAjD,CAHA;AAIVC,QAAAA,YAAY,EAAE,EAJJ;AAKVC,QAAAA,QAAQ,EAAE,CALA;AAMVC,QAAAA,aAAa,EAAE;AANL,OAAd;AAQH,KA/DkB;;AAAA,UAkEnBE,oBAlEmB,GAkEI,YAAM;AACzB,UAAInB,QAAQ,GAAG,EAAf,CADyB,CAEzB;;AACAA,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,MAAKE,QAAL,CAAc,CAAd,CAAd;AACAF,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,MAAKE,QAAL,CAAc,CAAd,CAAd;AACAF,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,MAAKE,QAAL,CAAc,CAAd,CAAd;AACAF,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,MAAKE,QAAL,CAAc,CAAd,CAAd;AACAF,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,MAAKE,QAAL,CAAc,CAAd,CAAd;AACAF,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,MAAKE,QAAL,CAAc,CAAd,CAAd,CARyB,CAUzB;;AACA,UAAIC,MAAM,GAAGH,QAAQ,CAACI,IAAT,CAAc,CAAC,CAAD,CAAd,CAAb,CAXyB,CAazB;;AACA,WAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGE,MAAM,CAACE,MAA3B,EAAmCJ,CAAC,EAApC,EAAwC;AACpC,aAAK,IAAIK,CAAC,GAAGL,CAAC,GAAC,CAAf,EAAkBK,CAAC,GAAGH,MAAM,CAACE,MAA7B,EAAqCC,CAAC,EAAtC;AACA,cAAIH,MAAM,CAACF,CAAD,CAAN,KAAcE,MAAM,CAACG,CAAD,CAAxB,EAA6B;AACzBC,YAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACF,CAAD,CAAlB,EAAsBE,MAAM,CAACG,CAAD,CAA5B;AACA,mBAAO,MAAKa,oBAAL,EAAP;AACH;AAJD;AAKH;;AACD,YAAKV,QAAL,CAAc;AACVC,QAAAA,KAAK,EAAEP,MADG;AAEVQ,QAAAA,SAAS,EAAEC,KAAK,CAAC,GAAD,CAAL,CAAWC,IAAX,CAAgB,IAAhB,CAFD;AAGVC,QAAAA,QAAQ,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,wBAAvB,EAAiD,SAAjD,CAHA;AAIVC,QAAAA,YAAY,EAAE,EAJJ;AAKVC,QAAAA,QAAQ,EAAE,CALA;AAMVC,QAAAA,aAAa,EAAE;AANL,OAAd;AAQH,KA/FkB;;AAAA,UAuHnBG,WAvHmB,GAuHL,UAACnB,CAAD,EAAO;AACjB;AADiB,wBAEgC,MAAKoB,KAFrC;AAAA,UAEZX,KAFY,eAEZA,KAFY;AAAA,UAELC,SAFK,eAELA,SAFK;AAAA,UAEMI,YAFN,eAEMA,YAFN;AAAA,UAEoBC,QAFpB,eAEoBA,QAFpB,EAGjB;;AACA,UAAIL,SAAS,CAACV,CAAD,CAAT,IAAgB,IAAhB,IAAwBe,QAAQ,GAAGN,KAAK,CAACL,MAA7C,EAAqD;AACjD;AACA,YAAIU,YAAY,IAAI,CAApB,EAAuB;AACnB,gBAAKE,aAAL,CAAmB,yBAAnB;;AACA,gBAAKK,aAAL,CAAmBZ,KAAnB,EAFmB,CAGvB;;AACC,SAJD,MAIO;AACH;AACA,cAAIA,KAAK,CAACa,QAAN,CAAetB,CAAf,CAAJ,EAAuB;AACnB,gBAAIuB,GAAG,GAAGb,SAAV;AACAa,YAAAA,GAAG,CAACvB,CAAD,CAAH,GAAS,GAAT;;AACA,kBAAKQ,QAAL,CAAc;AACVE,cAAAA,SAAS,EAAEa,GADD;AAEVT,cAAAA,YAAY,EAAEA,YAAY,GAAE,CAFlB;AAGVC,cAAAA,QAAQ,EAAEA,QAAQ,GAAE;AAHV,aAAd,EAHmB,CAQnB;;AACH,WATD,MASO;AACH,gBAAIS,IAAI,GAAGd,SAAX;AACAc,YAAAA,IAAI,CAACxB,CAAD,CAAJ,GAAU,GAAV;;AACA,kBAAKQ,QAAL,CAAc;AACVE,cAAAA,SAAS,EAAEc,IADD;AAEVV,cAAAA,YAAY,EAAEA,YAAY,GAAE;AAFlB,aAAd;AAIH;AACJ,SAzBgD,CA0BjD;;;AACA,cAAKW,WAAL;AACH;AACJ,KAxJkB;;AAAA,UA0JnBA,WA1JmB,GA0JN,YAAK;AACd,UAAG,MAAKL,KAAL,CAAWL,QAAX,IAAuB,MAAKK,KAAL,CAAWX,KAAX,CAAiBL,MAAjB,GAAwB,CAAlD,EAAqD;AACjD,cAAKY,aAAL,CAAmB,cAAnB;AACH;AACJ,KA9JkB;;AAAA,UAgKnBK,aAhKmB,GAgKH,UAACZ,KAAD,EAAW;AACvB,UAAIiB,OAAO,GAAG,qDAAd;;AACA,WAAK,IAAI1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,KAAK,CAACL,MAA1B,EAAkCJ,CAAC,EAAnC,EAAuC;AACnC,YAAI,MAAKoB,KAAL,CAAWV,SAAX,CAAqBD,KAAK,CAACT,CAAD,CAA1B,MAAmC,IAAvC,EAA6C;AACzC,cAAI2B,MAAM,GAAG,MAAKP,KAAL,CAAWV,SAAxB;AACAiB,UAAAA,MAAM,CAAClB,KAAK,CAACT,CAAD,CAAN,CAAN,GAAmB,GAAnB;;AACA,gBAAKQ,QAAL,CAAc;AACVE,YAAAA,SAAS,EAAEiB,MADD;AAEVX,YAAAA,aAAa,EAAEU;AAFL,WAAd;AAIH;AACJ;;AAAA,aAAOA,OAAP;AACJ,KA5KkB;;AAAA,UA8KnBV,aA9KmB,GA8KH,UAACU,OAAD,EAAa;AACzB,YAAKlB,QAAL,CAAc;AAACQ,QAAAA,aAAa,EAAEU;AAAhB,OAAd;AACH,KAhLkB;;AAAA,UAkLnBE,YAlLmB,GAkLJ,UAAC5B,CAAD,EAAO;AAClB,UAAI,MAAKoB,KAAL,CAAWV,SAAX,CAAqBV,CAArB,MAA0B,GAA9B,EAAmC;AAC/B,eAAO,MAAKoB,KAAL,CAAWP,QAAX,CAAoB,CAApB,CAAP;AACH,OAFD,MAEO,IAAI,MAAKO,KAAL,CAAWV,SAAX,CAAqBV,CAArB,MAA0B,GAA9B,EAAmC;AACtC,eAAO,MAAKoB,KAAL,CAAWP,QAAX,CAAoB,CAApB,CAAP;AACH,OAFM,MAEA,IAAI,MAAKO,KAAL,CAAWV,SAAX,CAAqBV,CAArB,MAA0B,GAA9B,EAAmC;AACtC,eAAO,MAAKoB,KAAL,CAAWP,QAAX,CAAoB,CAApB,CAAP;AACH,OAFM,MAEA;AACH,eAAO,MAAKO,KAAL,CAAWP,QAAX,CAAoB,CAApB,CAAP;AACH;AACJ,KA5LkB;;AAEf,UAAKO,KAAL,GAAW;AACPV,MAAAA,SAAS,EAAEC,KAAK,CAAC,GAAD,CAAL,CAAWC,IAAX,CAAgB,IAAhB,CADJ;AAEPC,MAAAA,QAAQ,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,wBAAvB,EAAiD,SAAjD,CAFH;AAGPJ,MAAAA,KAAK,EAAE,EAHA;AAIPK,MAAAA,YAAY,EAAE,CAJP;AAKPC,MAAAA,QAAQ,EAAE,CALH;AAMPC,MAAAA,aAAa,EAAE;AANR,KAAX;AAFe;AAUlB,G,CAEL;;;;;AAqFI;6BACUa,G,EAAK;AACX;AACA,UAAIC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAe,EAA1B,CAAR;AACA,UAAIC,CAAC,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAgB,KAAGJ,GAAnB,CAAX,CAAR;AACA,UAAIM,QAAQ,GAAG,EAAf,CAJW,CAKX;;AACA,UAAKJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,CAAzB,IAA8B,CAA/B,IAAqC,CAAzC,EAA4C;AACxC;AACA,aAAK,IAAIjC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6B,GAApB,EAAyB7B,CAAC,EAA1B,EAA8B;AAC1BmC,UAAAA,QAAQ,CAACC,IAAT,CAAcC,QAAQ,CAAC,MAAMH,CAAC,GAAClC,CAAR,IAAa8B,CAAd,CAAtB;AACH;AACJ,OALD,MAKO;AACH;AACA,aAAK,IAAI9B,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG6B,GAApB,EAAyB7B,GAAC,EAA1B,EAA8B;AAC1BmC,UAAAA,QAAQ,CAACC,IAAT,CAAcC,QAAQ,CAAC,KAAKP,CAAL,IAAUI,CAAC,GAAClC,GAAZ,CAAD,CAAtB;AACH;AACJ;;AACD,aAAOmC,QAAP;AACH,K,CAED;;;;6BAyEO;AAAA;;AACP,aACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAS,QAAA,SAAS,EAAC,iBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,SAAS,EAAC,WAAlB;AAA8B,QAAA,OAAO,EAAE,KAAKrC,eAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAII;AAAQ,QAAA,SAAS,EAAC,oBAAlB;AAAuC,QAAA,OAAO,EAAE,KAAKmB,mBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,EAOI;AAAQ,QAAA,SAAS,EAAC,qBAAlB;AAAwC,QAAA,OAAO,EAAE,KAAKC,oBAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAPJ,CAFJ,CADJ,EAeQ;AAAS,QAAA,SAAS,EAAC,gBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKE,KAAL,CAAWV,SAAX,CAAqB4B,GAArB,CAAyB,UAACC,EAAD,EAAKvC,CAAL;AAAA,eAC1B;AAAK,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACmB,WAAL,CAAiBnB,CAAjB,CAAN;AAAA,WAAd;AAAyC,UAAA,KAAK,EAAE;AAACwC,YAAAA,eAAe,EAAE,MAAI,CAACZ,YAAL,CAAkB5B,CAAlB;AAAlB,WAAhD;AAAyF,UAAA,SAAS,EAAC,OAAnG;AAA2G,UAAA,EAAE,EAAEA,CAA/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD0B;AAAA,OAAzB,CADL,CADJ,CAfR,EAuBQ;AAAS,QAAA,SAAS,EAAC,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACyB,KAAKoB,KAAL,CAAWN,YADpC,CADJ,EAII;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACW,KAAKM,KAAL,CAAWL,QADtB,UACoC,KAAKK,KAAL,CAAWX,KAAX,CAAiBL,MADrD,CAJJ,CAFJ,EAUI;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACe,KAAKgB,KAAL,CAAWN,YAAX,KAA4B,CAA7B,GAAkC,KAAKO,aAAL,CAAmB,KAAKD,KAAL,CAAWX,KAA9B,CAAlC,GAAyE,KAAKW,KAAL,CAAWJ,aADlG,CAVJ,CAvBR,CADJ,CADJ;AA0CD;;;;EA3OiBrB,S;;AA8OpB,eAAeC,KAAf","sourcesContent":["import React, { Component } from 'react';\n\nimport './Board.css';\n\nclass Board extends Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            gameBoard: Array(100).fill(null),\n            boxColor: ['#D0D5D8', '#db0000', 'rgba(255, 255, 255, 0)', '#ffff00'],\n            ships: [],\n            torpedoCount: 0,\n            hitCount: 0,\n            statusMessage: 'Blast me if you can!'\n        }\n    }\n\n// Easy Board Constructor//\n    createBoardEasy = () => {\n        let emptyArr = []\n        for (let i = 5; i > 0; i--) {\n            emptyArr[i] = this.shipYard(i)\n        }\n        let newArr = emptyArr.flat([1])\n\n        for (let i = 0; i < newArr.length; i++) {\n            for (let k = i+1; k < newArr.length; k++)\n            if (newArr[i] === newArr[k]) {\n                console.log(newArr[i],newArr[k]);\n                return this.createBoardEasy()\n            }\n        }\n        this.setState({\n            ships: newArr,\n            gameBoard: Array(100).fill(null),\n            boxColor: ['#D0D5D8', '#db0000', 'rgba(255, 255, 255, 0)', '#ffff00'],\n            torpedoCount: 50,\n            hitCount: 0,\n            statusMessage: 'Blast me if you can!'\n        })\n    }\n\n    // Moderate Board Constructor//\n    createBoardModerate = () => {\n        let emptyArr = []\n        emptyArr[1] = this.shipYard(1)\n        emptyArr[2] = this.shipYard(2)\n        emptyArr[4] = this.shipYard(3)\n        emptyArr[5] = this.shipYard(4)\n        emptyArr[6] = this.shipYard(5)\n\n        let newArr = emptyArr.flat([1])\n\n        for (let i = 0; i < newArr.length; i++) {\n            for (let k = i+1; k < newArr.length; k++)\n            if (newArr[i] === newArr[k]) {\n                console.log(newArr[i],newArr[k]);\n                return this.createBoardModerate()\n            }\n        }\n        this.setState({\n            ships: newArr,\n            gameBoard: Array(100).fill(null),\n            boxColor: ['#D0D5D8', '#db0000', 'rgba(255, 255, 255, 0)', '#ffff00'],\n            torpedoCount: 40,\n            hitCount: 0,\n            statusMessage: 'Blast me if you can!'\n        })\n    }\n\n    // Difficult Board Constructor//\n    createBoardDifficult = () => {\n        let emptyArr = []\n        // calls ship creator function. number is length of ship//\n        emptyArr[1] = this.shipYard(1)\n        emptyArr[2] = this.shipYard(2)\n        emptyArr[3] = this.shipYard(2)\n        emptyArr[4] = this.shipYard(3)\n        emptyArr[5] = this.shipYard(4)\n        emptyArr[6] = this.shipYard(5)\n\n        //takes nested arrays and makes one array without nested arrays//\n        let newArr = emptyArr.flat([1])\n\n        //nested loop checks for ships intersecting on the same array. if duplicate found, calls new board creation.//\n        for (let i = 0; i < newArr.length; i++) {\n            for (let k = i+1; k < newArr.length; k++)\n            if (newArr[i] === newArr[k]) {\n                console.log(newArr[i],newArr[k]);\n                return this.createBoardDifficult()\n            }\n        }\n        this.setState({\n            ships: newArr,\n            gameBoard: Array(100).fill(null),\n            boxColor: ['#D0D5D8', '#db0000', 'rgba(255, 255, 255, 0)', '#ffff00'],\n            torpedoCount: 40,\n            hitCount: 0,\n            statusMessage: 'Blast me if you can!'\n        })\n    }\n\n    //creates ship//\n    shipYard (num) {\n        //variables for x and y axis of ships//\n        let x = Math.floor(Math.random()* 10)\n        let y = Math.floor(Math.random()* (11-num))\n        let tempShip = []\n        // choses by random math if ship will be vertical or horizontal//\n        if ((Math.floor(Math.random()*2) % 2) == 0) {\n            // vertical\n            for (let i = 0; i < num; i++) {\n                tempShip.push(parseInt('' + (y+i) + x))\n            }\n        } else {\n            // horizontal\n            for (let i = 0; i < num; i++) {\n                tempShip.push(parseInt('' + x + (y+i)))\n            }\n        }\n        return tempShip\n    }\n\n    //function to handel player click on box//\n    playerClick = (i) => {\n        //deconstructs this.state for easier referencing in below function//\n        let {ships, gameBoard, torpedoCount, hitCount} = this.state\n        //makes sure click is on unclicked box and that hit count is not in winning state//\n        if (gameBoard[i] == null && hitCount < ships.length) {\n            //game over for out of torpedos//\n            if (torpedoCount <= 0) {\n                this.statusMessage(\"You're out of torpedos!\")\n                this.displayMissed(ships)\n            //checks ships index to see if hit or miss//\n            } else {\n                //hit//\n                if (ships.includes(i)) {\n                    let hit = gameBoard\n                    hit[i] = \"x\"\n                    this.setState({\n                        gameBoard: hit,\n                        torpedoCount: torpedoCount -1,\n                        hitCount: hitCount +1\n                    })\n                    //miss//\n                } else {\n                    let miss = gameBoard\n                    miss[i] = \"o\"\n                    this.setState({\n                        gameBoard: miss,\n                        torpedoCount: torpedoCount -1\n                    })\n                }\n            }\n            //checks for winner after hit or miss determined//\n            this.checkWinner()\n        }\n    }\n\n    checkWinner =()=> {\n        if(this.state.hitCount == this.state.ships.length-1) {\n            this.statusMessage('You\\'ve won!')\n        }\n    }\n\n    displayMissed = (ships) => {\n        let message = \"You did not use your torpedos wisely, young padawan\"\n        for (let i = 0; i < ships.length; i++) {\n            if (this.state.gameBoard[ships[i]] === null) {\n                let missed = this.state.gameBoard\n                missed[ships[i]] = \"m\"\n                this.setState({\n                    gameBoard: missed,\n                    statusMessage: message\n                })\n            }\n        }return message\n    }\n\n    statusMessage = (message) => {\n        this.setState({statusMessage: message})\n    }\n\n    displayColor = (i) => {\n        if (this.state.gameBoard[i]==='x') {\n            return this.state.boxColor[1]\n        } else if (this.state.gameBoard[i]==='o') {\n            return this.state.boxColor[2]\n        } else if (this.state.gameBoard[i]==='m') {\n            return this.state.boxColor[3]\n        } else {\n            return this.state.boxColor[0]\n        }\n    }\n\n\n  render() {\n    return (\n        <div className=\"wholePage\">\n            <div className=\"pageContent\">\n                <section className=\"headerContainer\">\n                    <h1 className=\"header\">Battleship</h1>\n                    <div className=\"selectLevel\">\n                        <button className=\"startGame\" onClick={this.createBoardEasy}>\n                            Easy\n                        </button>\n                        <button className=\"startGame moderate\" onClick={this.createBoardModerate}>\n                            Moderate\n                        </button>\n                        <button className=\"startGame difficult\" onClick={this.createBoardDifficult}>\n                            Difficult\n                        </button>\n                    </div>\n                </section>\n                    <section className=\"boardContainer\">\n                        <div className=\"board\">\n                            {this.state.gameBoard.map((el, i) => (\n                            <div onClick={() => this.playerClick(i)} style={{backgroundColor: this.displayColor(i)}} className=\"box i\" id={i}>\n                            </div>\n                        ))}\n                        </div>\n                    </section>\n                    <section className=\"content\">\n                        < br/>\n                        <div className=\"status\">\n                            <div className=\"torpsStatus\">\n                                Torpedos Remaining: {this.state.torpedoCount}\n                            </div>\n                            <div className=\"hitsStatus\">\n                                Hits: {this.state.hitCount} of {this.state.ships.length}\n                            </div>\n                        </div>\n                        <div className=\"message\">\n                            Message: {(this.state.torpedoCount === 0) ? this.displayMissed(this.state.ships) : this.state.statusMessage}\n                        </div>\n                    </section>\n            </div>\n        </div>\n    );\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}