{"ast":null,"code":"import _classCallCheck from \"/Users/juliannepeters/Library/Mobile Documents/com~apple~CloudDocs/Bootcamp/PortfolioSite/Projects/battleship/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/juliannepeters/Library/Mobile Documents/com~apple~CloudDocs/Bootcamp/PortfolioSite/Projects/battleship/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/juliannepeters/Library/Mobile Documents/com~apple~CloudDocs/Bootcamp/PortfolioSite/Projects/battleship/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/juliannepeters/Library/Mobile Documents/com~apple~CloudDocs/Bootcamp/PortfolioSite/Projects/battleship/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/juliannepeters/Library/Mobile Documents/com~apple~CloudDocs/Bootcamp/PortfolioSite/Projects/battleship/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/juliannepeters/Library/Mobile Documents/com~apple~CloudDocs/Bootcamp/PortfolioSite/Projects/battleship/src/Board.js\";\nimport React, { Component } from 'react';\nimport './Board.css';\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n\n    _this.createBoard = function (difficulty) {\n      if (difficulty === \"easy\") {\n        _this.preShipYard([2, 3, 4, 5], \"easy\");\n      } else if (difficulty === \"moderate\") {\n        _this.preShipYard([2, 2, 3, 4, 5], \"moderate\");\n      } else if (difficulty === \"difficult\") {\n        _this.preShipYard([2, 3, 3, 4, 5], \"difficult\");\n      }\n\n      _this.setState({\n        gameBoard: Array(100).fill(null),\n        hitCount: 0,\n        statusMessage: 'Blast me if you can!'\n      });\n    };\n\n    _this.preShipYard = function (arr, difficulty) {\n      var emptyArr = [];\n\n      for (var i = 0; i < arr.length; i++) {\n        emptyArr[i] = _this.shipYard(arr[i]);\n      }\n\n      _this.validateShips(emptyArr, difficulty);\n    };\n\n    _this.validateShips = function (arr, difficulty) {\n      var newArr = arr.flat([1]);\n      var torpCount = null;\n\n      for (var i = 0; i < newArr.length; i++) {\n        for (var k = i + 1; k < newArr.length; k++) {\n          if (newArr[i] === newArr[k]) {\n            return _this.createBoard(difficulty);\n          } else {\n            if (difficulty === \"easy\") {\n              torpCount = 60;\n            } else if (difficulty === \"moderate\") {\n              torpCount = 50;\n            } else if (difficulty === \"difficult\") {\n              torpCount = 45;\n            }\n\n            _this.setState({\n              torpedoCount: torpCount,\n              ships: newArr\n            });\n          }\n        }\n      }\n    };\n\n    _this.playerClick = function (i) {\n      //deconstructs this.state for easier referencing in below function//\n      var _this$state = _this.state,\n          ships = _this$state.ships,\n          gameBoard = _this$state.gameBoard,\n          torpedoCount = _this$state.torpedoCount,\n          hitCount = _this$state.hitCount; //makes sure click is on unclicked box and that hit count is not in winning state//\n\n      if (gameBoard[i] == null && hitCount < ships.length) {\n        //game over for out of torpedos//\n        if (torpedoCount <= 0) {\n          _this.statusMessage(\"You're out of torpedos!\");\n\n          _this.displayMissed(ships); //checks ships index to see if hit or miss//\n\n        } else {\n          //hit//\n          if (ships.includes(i)) {\n            var hit = gameBoard;\n            hit[i] = \"x\";\n\n            _this.setState({\n              gameBoard: hit,\n              torpedoCount: torpedoCount - 1,\n              hitCount: hitCount + 1\n            }); //miss//\n\n          } else {\n            var miss = gameBoard;\n            miss[i] = \"o\";\n\n            _this.setState({\n              gameBoard: miss,\n              torpedoCount: torpedoCount - 1\n            });\n          }\n        } //calls check for winner function after hit or miss determined//\n\n\n        _this.checkWinner();\n      }\n    };\n\n    _this.checkWinner = function () {\n      if (_this.state.hitCount == _this.state.ships.length - 1) {\n        _this.statusMessage('You\\'ve won!');\n      }\n    };\n\n    _this.displayMissed = function (ships) {\n      //loops through ships to assign \"m\" which will tell how squares should be displayed//\n      var message = \"You did not use your torpedos wisely, young padawan\";\n\n      for (var i = 0; i < ships.length; i++) {\n        if (_this.state.gameBoard[ships[i]] === null) {\n          var missed = _this.state.gameBoard;\n          missed[ships[i]] = \"m\";\n\n          _this.setState({\n            gameBoard: missed,\n            statusMessage: message\n          });\n        }\n      }\n\n      return message;\n    };\n\n    _this.displayColor = function (i) {\n      var colors = ['#D0D5D8', '#db0000', 'rgba(255, 255, 255, 0)', '#ffff00'];\n\n      if (_this.state.gameBoard[i] === 'x') {\n        return colors[1];\n      } else if (_this.state.gameBoard[i] === 'o') {\n        return colors[2];\n      } else if (_this.state.gameBoard[i] === 'm') {\n        return colors[3];\n      } else {\n        return colors[0];\n      }\n    };\n\n    _this.statusMessage = function (string) {\n      _this.setState({\n        statusMessage: string\n      });\n    };\n\n    _this.state = {\n      gameBoard: Array(100).fill(null),\n      boxColor: ['#D0D5D8', '#db0000', 'rgba(255, 255, 255, 0)', '#ffff00'],\n      ships: [],\n      torpedoCount: 0,\n      hitCount: 0,\n      statusMessage: 'Choose a difficulty level to start game!'\n    };\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"shipYard\",\n    //creates ship//\n    value: function shipYard(num) {\n      //variables for x and y axis of ships//\n      var x = Math.floor(Math.random() * 10);\n      var y = Math.floor(Math.random() * (11 - num));\n      var tempShip = []; // choses by random math if ship will be vertical or horizontal//\n\n      if (Math.floor(Math.random() * 2) % 2 === 0) {\n        // vertical\n        for (var i = 0; i < num; i++) {\n          tempShip.push(parseInt('' + (y + i) + x));\n        }\n      } else {\n        // horizontal\n        for (var _i = 0; _i < num; _i++) {\n          tempShip.push(parseInt('' + x + (y + _i)));\n        }\n      }\n\n      return tempShip;\n    } //function to handel player click on box//\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"wholePage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pageContent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        className: \"headerContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"Battleship\"), React.createElement(\"div\", {\n        className: \"selectLevel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"startGame\",\n        onClick: function onClick() {\n          return _this2.createBoard(\"easy\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"Easy\"), React.createElement(\"button\", {\n        className: \"startGame moderate\",\n        onClick: function onClick() {\n          return _this2.createBoard(\"moderate\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, \"Moderate\"), React.createElement(\"button\", {\n        className: \"startGame difficult\",\n        onClick: function onClick() {\n          return _this2.createBoard(\"difficult\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"Difficult\"))), React.createElement(\"section\", {\n        className: \"boardContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, this.state.gameBoard.map(function (el, i) {\n        return React.createElement(\"div\", {\n          onClick: function onClick() {\n            return _this2.playerClick(i);\n          },\n          style: {\n            backgroundColor: _this2.displayColor(i)\n          },\n          className: \"box i\",\n          id: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        });\n      }))), React.createElement(\"section\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"torpsStatus\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, \"Torpedos Remaining: \", this.state.torpedoCount), React.createElement(\"div\", {\n        className: \"hitsStatus\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, \"Hits: \", this.state.hitCount, \" of \", this.state.ships.length)), React.createElement(\"div\", {\n        className: \"message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \"Message: \", this.state.torpedoCount === 0 ? this.displayMissed(this.state.ships) : this.state.statusMessage), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }), React.createElement(\"footer\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, \"Battleship Game by \", React.createElement(\"a\", {\n        href: \"http://www.jpeters.me\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"Julianne Peters\"), \". \", React.createElement(\"a\", {\n        href: \"https://github.com/jscotty723/battleshipReact\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"Click here\"), \" to view project on \", React.createElement(\"a\", {\n        href: \"http://github.com\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"GitHub\"), \".\"))));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nexport default Board;","map":{"version":3,"sources":["/Users/juliannepeters/Library/Mobile Documents/com~apple~CloudDocs/Bootcamp/PortfolioSite/Projects/battleship/src/Board.js"],"names":["React","Component","Board","props","createBoard","difficulty","preShipYard","setState","gameBoard","Array","fill","hitCount","statusMessage","arr","emptyArr","i","length","shipYard","validateShips","newArr","flat","torpCount","k","torpedoCount","ships","playerClick","state","displayMissed","includes","hit","miss","checkWinner","message","missed","displayColor","colors","string","boxColor","num","x","Math","floor","random","y","tempShip","push","parseInt","map","el","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Board.css';\n\nclass Board extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gameBoard: Array(100).fill(null),\n            boxColor: ['#D0D5D8', '#db0000', 'rgba(255, 255, 255, 0)', '#ffff00'],\n            ships: [],\n            torpedoCount: 0,\n            hitCount: 0,\n            statusMessage: 'Choose a difficulty level to start game!'\n        }\n    }\n\n    createBoard = (difficulty) => {\n        if (difficulty === \"easy\") {\n            this.preShipYard([2, 3, 4, 5], \"easy\")\n        } else if (difficulty === \"moderate\") {\n            this.preShipYard([2, 2, 3, 4, 5], \"moderate\")\n        } else if (difficulty === \"difficult\") {\n            this.preShipYard([2, 3, 3, 4, 5], \"difficult\")\n        }\n        this.setState({\n            gameBoard: Array(100).fill(null),\n            hitCount: 0,\n            statusMessage: 'Blast me if you can!'\n        })\n    }\n\n    preShipYard = (arr, difficulty) => {\n        let emptyArr = []\n        for (let i = 0; i < arr.length; i++) {\n            emptyArr[i] = this.shipYard(arr[i])\n        }\n        this.validateShips(emptyArr, difficulty)\n    }\n\n    validateShips = (arr, difficulty) => {\n        let newArr = arr.flat([1])\n        let torpCount = null\n\n        for (let i = 0; i < newArr.length; i++) {\n            for (let k = i+1; k < newArr.length; k++)\n            if (newArr[i] === newArr[k]) {\n                return this.createBoard(difficulty)\n            } else {\n                if (difficulty === \"easy\") {\n                    torpCount = 60\n                } else if (difficulty === \"moderate\") {\n                    torpCount = 50\n                } else if (difficulty === \"difficult\") {\n                    torpCount = 45\n                }\n            this.setState({\n                torpedoCount: torpCount,\n                ships: newArr\n            })\n            }\n        }\n    }\n\n    //creates ship//\n    shipYard (num) {\n        //variables for x and y axis of ships//\n        let x = Math.floor(Math.random()* 10)\n        let y = Math.floor(Math.random()* (11-num))\n        let tempShip = []\n        // choses by random math if ship will be vertical or horizontal//\n        if ((Math.floor(Math.random()*2) % 2) === 0) {\n            // vertical\n            for (let i = 0; i < num; i++) {\n                tempShip.push(parseInt('' + (y+i) + x))\n            }\n        } else {\n            // horizontal\n            for (let i = 0; i < num; i++) {\n                tempShip.push(parseInt('' + x + (y+i)))\n            }\n        }\n        return tempShip\n    }\n\n    //function to handel player click on box//\n    playerClick = (i) => {\n        //deconstructs this.state for easier referencing in below function//\n        let {ships, gameBoard, torpedoCount, hitCount} = this.state\n        //makes sure click is on unclicked box and that hit count is not in winning state//\n        if (gameBoard[i] == null && hitCount < ships.length) {\n            //game over for out of torpedos//\n            if (torpedoCount <= 0) {\n                this.statusMessage(\"You're out of torpedos!\")\n                this.displayMissed(ships)\n            //checks ships index to see if hit or miss//\n            } else {\n                //hit//\n                if (ships.includes(i)) {\n                    let hit = gameBoard\n                    hit[i] = \"x\"\n                    this.setState({\n                        gameBoard: hit,\n                        torpedoCount: torpedoCount -1,\n                        hitCount: hitCount +1\n                    })\n                    //miss//\n                } else {\n                    let miss = gameBoard\n                    miss[i] = \"o\"\n                    this.setState({\n                        gameBoard: miss,\n                        torpedoCount: torpedoCount -1\n                    })\n                }\n            }\n            //calls check for winner function after hit or miss determined//\n            this.checkWinner()\n        }\n    }\n\n    //function for seeing if all index's in ships array are \"hit\"//\n    checkWinner = () => {\n        if(this.state.hitCount == this.state.ships.length-1) {\n            this.statusMessage('You\\'ve won!')\n        }\n    }\n\n    //calls all ships not hit to be displayed in different color so that user can see location of unhit ships//\n    displayMissed = (ships) => {\n        //loops through ships to assign \"m\" which will tell how squares should be displayed//\n        let message = \"You did not use your torpedos wisely, young padawan\"\n        for (let i = 0; i < ships.length; i++) {\n            if (this.state.gameBoard[ships[i]] === null) {\n                let missed = this.state.gameBoard\n                missed[ships[i]] = \"m\"\n                this.setState({\n                    gameBoard: missed,\n                    statusMessage: message\n                })\n            }\n        } return message\n    }\n\n    displayColor = (i) => {\n        let colors = ['#D0D5D8', '#db0000', 'rgba(255, 255, 255, 0)', '#ffff00']\n        if (this.state.gameBoard[i]==='x') {\n            return colors[1]\n        } else if (this.state.gameBoard[i]==='o') {\n            return colors[2]\n        } else if (this.state.gameBoard[i]==='m') {\n            return colors[3]\n        } else {\n            return colors[0]\n        }\n    }\n\n    statusMessage = (string) => {\n        this.setState({\n            statusMessage: string\n        })\n    }\n\n  render() {\n    return (\n        <div className=\"wholePage\">\n            <div className=\"pageContent\">\n                <section className=\"headerContainer\">\n                    <h1 className=\"header\">Battleship</h1>\n                    <div className=\"selectLevel\">\n                        <button className=\"startGame\" onClick={() => this.createBoard(\"easy\")}>\n                            Easy\n                        </button>\n                        <button className=\"startGame moderate\" onClick={() => this.createBoard(\"moderate\")}>\n                            Moderate\n                        </button>\n                        <button className=\"startGame difficult\" onClick={() => this.createBoard(\"difficult\")}>\n                            Difficult\n                        </button>\n                    </div>\n                </section>\n                <section className=\"boardContainer\">\n                    <div className=\"board\">\n                        {this.state.gameBoard.map((el, i) => (\n                        <div onClick={() => this.playerClick(i)} style={{backgroundColor: this.displayColor(i)}} className=\"box i\" id={i}>\n                        </div>\n                    ))}\n                    </div>\n                </section>\n                <section className=\"content\">\n                    < br/>\n                    <div className=\"status\">\n                        <div className=\"torpsStatus\">\n                            Torpedos Remaining: {this.state.torpedoCount}\n                        </div>\n                        <div className=\"hitsStatus\">\n                            Hits: {this.state.hitCount} of {this.state.ships.length}\n                        </div>\n                    </div>\n                    <div className=\"message\">\n                        Message: {(this.state.torpedoCount === 0) ? this.displayMissed(this.state.ships) : this.state.statusMessage}\n                    </div>\n                    < br/>\n                    <footer>\n                        Battleship Game by <a href=\"http://www.jpeters.me\">Julianne Peters</a>. <a href=\"https://github.com/jscotty723/battleshipReact\">Click here</a> to view project on <a href=\"http://github.com\">GitHub</a>.\n                    </footer>\n                </section>\n            </div>\n        </div>\n    );\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}